{"ast":null,"code":"import React, { useEffect, useRef } from 'react';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar objectWithoutProperties = function objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nfunction DangerouslySetHtmlContent(props) {\n  var html = props.html,\n      rest = objectWithoutProperties(props, ['html']);\n  var divRef = useRef(null);\n  useEffect(function () {\n    if (!html) return;\n    var slotHtml = document.createRange().createContextualFragment(html); // Create a 'tiny' document and parse the html string\n\n    divRef.current.innerHTML = ''; // Clear the container\n\n    divRef.current.appendChild(slotHtml); // Append the new content\n  }, [html]);\n  return React.createElement('div', _extends({}, rest, {\n    ref: divRef\n  }));\n}\n\nexport default DangerouslySetHtmlContent;","map":{"version":3,"sources":["../src/index.js"],"names":["html","rest","props","divRef","useRef","slotHtml","document"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAAA,yBAAA,CAAA,KAAA,EAA0C;MAChCA,IADgC,GACdE,KADc,CAAA,I;MACvBD,IADuB,GAAA,uBAAA,CAAA,KAAA,EAAA,CAAA,MAAA,CAAA,C;MAElCE,MAAAA,GAASC,MAAAA,CAAf,IAAeA,C;YAEL,YAAM;QACV,CAAJ,I,EAAW;QAELC,QAAAA,GAAWC,QAAAA,CAAAA,WAAAA,GAAAA,wBAAAA,CAHH,IAGGA,C,CAHH,CAAA;;WAId,O,CAAA,S,GAJc,E,CAAA,CAAA;;WAKd,O,CAAA,W,CALc,Q,EAAA,CAAA;AAAhB,G,EAMG,CANH,IAMG,C;SAID,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAAe,IAAA,GAAA,EADjB;AACE,GAAA,CAAA,C","sourcesContent":["import React, { useEffect, useRef } from 'react'\n\nfunction DangerouslySetHtmlContent(props) {\n  const { html, ...rest } = props\n  const divRef = useRef(null)\n\n  useEffect(() => {\n    if (!html) return\n\n    const slotHtml = document.createRange().createContextualFragment(html) // Create a 'tiny' document and parse the html string\n    divRef.current.innerHTML = '' // Clear the container\n    divRef.current.appendChild(slotHtml) // Append the new content\n  }, [html])\n\n\n  return (\n    <div {...rest} ref={divRef}></div>\n  )\n}\n\nexport default DangerouslySetHtmlContent\n"]},"metadata":{},"sourceType":"module"}